---
- name: Build & Deploy Docker Container
  hosts: all
  gather_facts: false
  become: true

  tasks:
    - name: Pull Docker Image
      docker_image:
        name: "{{ DOCKER_IMAGE }}:{{ BUILD_NUMBER }}"
        source: pull

    - name: Run Docker Container
      docker_container:
        name: my_container
        image: "{{ DOCKER_IMAGE }}:{{ BUILD_NUMBER }}"
        state: started
        ports:
          - "8079:8080"
          
    - name: Gather Docker container facts
      docker_container:
        name: my_container
      register: container_facts

    - name: Print container facts
      debug:
        var: container_facts.containers

- name: Apply Monitoring Stack
  hosts: localhost
  gather_facts: false
  become: true

  tasks:
    - name: Install Prometheus
      apt:
        name: prometheus
        state: present

    - name: Install Node Exporter
      apt:
        name: prometheus-node-exporter
        state: present

    - name: Start Prometheus service
      service:
        name: prometheus
        state: started
        enabled: yes

    - name: Start Node Exporter service
      service:
        name: prometheus-node-exporter
        state: started
        enabled: yes

    - name: Add Node Exporter target to Prometheus config
      lineinfile:
        dest: /etc/prometheus/prometheus.yml
        line: |
          - job_name: "node"
            static_configs:
              - targets: ["localhost:9100"]
      notify: restart prometheus
  
    - name: Install Grafana
      apt:
        name: grafana
        state: present

    - name: Start Grafana service
      service:
        name: grafana-server
        state: started
        enabled: yes

    #- name: Configure Grafana datasources
    #  grafana_datasource:
    #    name: Prometheus
    #    url: http://localhost:9090
    #    access: proxy
    #  #  type: prometheus
    #    ds_type: prometheus
    #    ds_url: http://localhost:9090
    #    state: present

    - name: Configure Grafana datasources
      uri:
        url: http://localhost:3000/api/datasources
        method: POST
        body_format: json
        body:
          name: Prometheus
          url: http://localhost:9090
          access: proxy
          ds_type: prometheus
          ds_url: http://localhost:9090
          state: present
        headers:
          Content-Type: "application/json"
      register: grafana_datasource_response


    - name: Copy Grafana dashboard JSON to Grafana provisioning directory
      copy:
        src: "/var/lib/jenkins/workspace/Industry_project@2/dashboard.json"
        dest: /etc/grafana/provisioning/dashboards/
      notify: restart grafana-server
#      ignore_errors: yes

  handlers:
    - name: restart prometheus
      service:
        name: prometheus
        state: restarted

    - name: restart grafana-server
      service:
        name: grafana-server
        state: restarted


- name: Apply Kubernetes manifest files #Ansible invoking the manifest files
  hosts: localhost
  vars:
    kube_ns:  |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: abc-clst

    kube_pod: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: my-container-pod
        namespace: abc-clst
      spec:
        containers:
        - name: my-container
          image: "{{ DOCKER_IMAGE }}:{{ BUILD_NUMBER }}"
          ports:
          - containerPort: 8080

    kube_service: |
      apiVersion: v1
      kind: Service
      metadata:
        name: my-container-service
        #Build #120 names Namespace is required for apps/v1.Deployment
        namespace: abc-clst 
        labels: 
          app: "my-container"
      spec:
        ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
        selector:
          app: my-container
        type: LoadBalancer
        loadBalancerIP: ""
        

    kube_deployment: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-container-deployment
        namespace: abc-clst
        labels: 
          app: my-container
      spec:
        replicas: 3
        selector:
          matchLabels:
            app: my-container
        template:
          metadata:
            labels:
              app: my-container
          spec:
            containers:
            - name: my-container
              image: "{{ DOCKER_IMAGE }}:{{ BUILD_NUMBER }}"
              ports:
              - containerPort: 8080

#    kube_ingress: |
#      apiVersion: networking.k8s.io/v1
#      kind: Ingress
#      metadata:
#        name: my-container-ingress
#        namespace: abc-clst
#      spec:
#        rules:
#          - host: "{{ LOAD_BALANCER_IP }}"
#            http:
#              paths:
#                - path: /abc_tech
#                  pathType: Prefix
#                  backend:
#                    service:
#                      name: my-container-service
#                      port:
#                        number: 80

  tasks:
    - name: Apply Kubernetes manifest files
      k8s:
        state: present
        definition: "{{ item }}"
      with_items:
        - "{{ kube_ns }}"
        - "{{ kube_pod }}"
        - "{{ kube_service }}"
        - "{{ kube_deployment }}"
#        - "{{ kube_ingress }}"

